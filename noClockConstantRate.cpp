//
//  main.cpp
//  noClock
//
//  Created by Andrew Richards on 11/25/20.
//  Copyright Â© 2020 Andrew Richards. All rights reserved.
//

#include <sstream>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <math.h>
#include <map>
#include <random>
#include <algorithm>
#include <cstdlib> // for exit()



std::vector<long double> getProbSym(double t1, double t2, double t3, double gammaA, double gammaB, double gammaC, double gammaD, double gammaAB, double gammaCD, double theta);
std::vector<long double> getProbAsymm(double t1, double t2, double t3, double gammaA, double gammaB, double gammaC, double gammaD, double gammaCD, double gammaBCD, double theta);
std::vector<int> getCounts(std::vector<long double> x, int y);


std::vector<int> getCounts(std::vector<long double> x, int y){
    std::random_device rd;
    std::mt19937 gen(rd());
    std::discrete_distribution<> d({static_cast<double>(x[0]),
        static_cast<double>(x[1]),
        static_cast<double>(x[2]),
        static_cast<double>(x[3]),
        static_cast<double>(x[4]),
        static_cast<double>(x[5]),
        static_cast<double>(x[6]),
        static_cast<double>(x[7]),
        static_cast<double>(x[8]),
        static_cast<double>(x[9]),
        static_cast<double>(x[10]),
        static_cast<double>(x[11]),
        static_cast<double>(x[12]),
        static_cast<double>(x[13]),
        static_cast<double>(x[14]),
    });
    std::map<int, int> m;
    for(int n=0; n<y; ++n) {
        ++m[d(gen)];
    }
    
    std::vector<int> q{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    for(int n=0; n<15; ++n) {
        q[n]=m[n];
    }
    
    return q;
}

std::vector<long double> getProbSym(double t1, double t2, double t3, double gammaA, double gammaB, double gammaC, double gammaD, double gammaAB, double gammaCD, double theta){
    std::vector<long double> z{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   
    int k[116][15]{
    {3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
    ,{9,-3,-3,9,9,9,-3,-3,-3,-3,-3,-3,-3,9,-3}
    ,{3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
    ,{9,-3,-3,9,9,9,-3,-3,-3,-3,-3,-3,-3,9,-3}
    ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
    ,{9,9,-3,-3,9,-3,-3,9,-3,-3,-3,9,-3,-3,-3}
    ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
    ,{9,-3,9,-3,9,-3,9,-3,-3,-3,-3,-3,9,-3,-3}
    ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
    ,{3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
    ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
    ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
    ,{12,-4,-4,12,12,12,-4,-4,-4,-4,-4,-4,-4,12,-4}
    ,{15,15,-5,15,-5,-5,15,-5,-5,15,-5,-5,-5,-5,-5}
    ,{12,12,-4,-4,12,-4,-4,12,-4,-4,-4,12,-4,-4,-4}
    ,{15,-5,15,15,-5,-5,-5,15,-5,-5,15,-5,-5,-5,-5}
    ,{12,-4,12,-4,12,-4,12,-4,-4,-4,-4,-4,12,-4,-4}
    ,{15,15,15,-5,-5,15,-5,-5,15,-5,-5,-5,-5,-5,-5}
    ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
    ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
    ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
    ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
    ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{24,24,-8,24,-8,-8,24,-8,-8,24,-8,-8,-8,-8,-8}
    ,{24,24,-8,-8,24,-8,-8,24,-8,-8,-8,24,-8,-8,-8}
    ,{24,-8,24,24,-8,-8,-8,24,-8,-8,24,-8,-8,-8,-8}
    ,{24,-8,24,-8,24,-8,24,-8,-8,-8,-8,-8,24,-8,-8}
    ,{24,-8,-8,24,24,24,-8,-8,-8,-8,-8,-8,-8,24,-8}
    ,{24,24,24,-8,-8,24,-8,-8,24,-8,-8,-8,-8,-8,-8}
    ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
    ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
    ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
    ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
    ,{6,-2,-2,6,6,6,-2,-2,-2,-2,-2,-2,-2,6,-2}
    ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
    ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
    ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
    ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
    ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
    ,{6,-2,-2,6,6,6,-2,-2,-2,-2,-2,-2,-2,6,-2}
    ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
    ,{6,-2,-2,-2,6,-2,-2,-2,2,2,2,-2,-2,-2,2}
    ,{18,-6,-6,18,-6,-6,-6,-6,6,-6,-6,6,6,-6,6}
    ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
    ,{18,18,-6,-6,-6,-6,-6,-6,-6,-6,6,-6,6,6,6}
    ,{18,-6,18,-6,-6,-6,-6,-6,-6,6,-6,6,-6,6,6}
    ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
    ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
    ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
    ,{6,-2,-2,-2,6,-2,-2,-2,2,2,2,-2,-2,-2,2}
    ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
    ,{12,-4,-4,-4,12,-4,-4,-4,4,4,4,-4,-4,-4,4}
    ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
    ,{6,-2,-2,-2,6,-2,-2,-2,2,2,2,-2,-2,-2,2}
    ,{24,-8,-8,24,-8,-8,-8,-8,8,-8,-8,8,8,-8,8}
    ,{36,-12,-12,-12,36,-12,-12,-12,12,12,12,-12,-12,-12,12}
    ,{24,24,-8,-8,-8,-8,-8,-8,-8,-8,8,-8,8,8,8}
    ,{24,-8,24,-8,-8,-8,-8,-8,-8,8,-8,8,-8,8,8}
    ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
    ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
    ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
    ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
    ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
    ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
    ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
    ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
    ,{18,18,-6,-6,-6,-6,-6,-6,-6,-6,6,-6,6,6,6}
    ,{18,-6,18,-6,-6,-6,-6,-6,-6,6,-6,6,-6,6,6}
    ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
    ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
    ,{48,-16,-16,48,-16,-16,-16,-16,16,-16,-16,16,16,-16,16}
    ,{36,-12,-12,-12,36,-12,-12,-12,12,12,12,-12,-12,-12,12}
    ,{48,48,-16,-16,-16,-16,-16,-16,-16,-16,16,-16,16,16,16}
    ,{48,-16,48,-16,-16,-16,-16,-16,-16,16,-16,16,-16,16,16}
    ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
    ,{12,12,-4,-4,-4,-4,-4,-4,-4,-4,4,-4,4,4,4}
    ,{12,-4,12,-4,-4,-4,-4,-4,-4,4,-4,4,-4,4,4}
    ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
    ,{12,-4,-4,-4,12,-4,-4,-4,4,4,4,-4,-4,-4,4}
    ,{12,-4,-4,-4,-4,-4,4,4,4,0,0,0,0,4,-4}
    ,{36,-12,-12,-12,-12,-12,12,12,12,0,0,0,0,12,-12}
    ,{12,-4,-4,-4,-4,-4,4,4,4,0,0,0,0,4,-4}
    ,{180,-60,-60,-60,-60,20,20,20,20,20,20,20,20,20,-60}
    ,{36,-12,-12,-12,-12,4,4,4,4,4,4,4,4,4,-12}
    ,{24,-8,-8,-8,-8,-8,8,8,8,0,0,0,0,8,-8}
    ,{9,-3,-3,-3,-3,9,1,1,-3,1,1,1,1,-3,1}
    ,{9,-3,-3,-3,-3,9,1,1,-3,1,1,1,1,-3,1}
    ,{9,-3,-3,-3,-3,9,1,1,-3,1,1,1,1,-3,1}
    ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
    ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
    ,{18,-6,-6,-6,-6,18,2,2,-6,2,2,2,2,-6,2}
    ,{108,-36,-36,-36,-36,44,44,44,-4,-4,-4,-4,-4,-4,12}
    ,{18,-6,-6,-6,-6,18,2,2,-6,2,2,2,2,-6,2}
    };
    
    t1 *= theta/2;  // adjust here
    t2 *= theta/2;  // adjust here
    t3 *= theta/2;  // adjust here
    
    long double m{4.0/3};
    long double x{exp(-(2.0/theta)*(t3-t1))}; //adjust 2.0 to 1.0
    long double y{exp(-(2.0/theta)*(t3-t2))}; //adjust 2.0 to 1.0
    long double a{exp(-m*t1)};
    long double b{exp(-m*t2)};
    long double c{exp(-m*t3)};
    long double h1{exp(-m*t1*(gammaC-gammaCD))};
    long double h2{exp(-m*t1*(gammaD-gammaCD))};
    long double h3{exp(-m*t2*(gammaA-gammaAB))};
    long double h4{exp(-m*t2*(gammaB-gammaAB))};
    long double h5{exp(-m*t3*(gammaAB-1.0))};
    long double h6{exp(-m*t3*(gammaCD-1.0))};
    long double m1{m*gammaCD};
    long double m2{m*gammaAB};
    long double a1{pow(a, gammaCD)};
  //  double a2{pow(a, gammaAB)};
   // double b1{pow(b, gammaCD)};
    long double b2{pow(b, gammaAB)};
    long double c1{pow(c, gammaCD)};
    long double c2{pow(c, gammaAB)};
    
  //  theta *=2; // adjust here
    
    for(int i=0; i<15; ++i){
        long double q1{k[0][i]*h1*h2/(1.0+m1*theta)*(a1*a1-c1*c1*x)*(1.0-y)
        };
        long double q2{k[1][i]*h1*h2/(3.0*(1.0+m1*theta))*y*(a1*a1-c1*c1*x)
        };
        long double q3{k[2][i]*h1*h2*h6*h6/(3.0+m*theta)*c*c*x*(1.0-y)
        };
        long double q4{(k[3][i]*h1*h2*h6*h6+k[4][i]*h1*h3*h5*h6+k[5][i]*h1*h4*h5*h6
            +k[6][i]*h2*h3*h5*h6+k[7][i]*h2*h4*h5*h6+k[8][i]*h3*h4*h5*h5)
              /(3.0*(6.0+m*theta))*c*c*x*y
        };
        long double q5{
            (k[9][i]*h1*h2*h6*h6+k[10][i]*h1*h4*h5*h6+k[11][i]*h2*h4*h5*h6)
            /((3.0+m*theta)*(6.0+m*theta))*c*c*x*y
        };
        long double q6{
           k[12][i]*h3*h4/(3.0*(1.0+m2*theta))*x*(b2*b2-c2*c2*y)
        };
        long double q7{
           k[13][i]*h3*h4/(1.0+m2*theta)*(1.0-x)*(b2*b2-c2*c2*y)  //group 2
        };
        long double q8{
           (k[14][i]*h3*h4*h5*h5+k[15][i]*h1*h3*h5*h6+k[16][i]*h1*h4*h5*h6
           +k[17][i]*h2*h3*h5*h6+k[18][i]*h2*h4*h5*h6)/(3.0+m*theta)*c*c*y*(1.0-x)
        };
        long double q9{
           k[19][i]*h3*h4/(3.0*(1.0+m2*theta))*x*(b2*b2-c2*c2*y)
        };
        long double q10{
           (k[20][i]*h1*h2*h6*h6+k[21][i]*h1*h3*h5*h6+k[22][i]*h1*h4*h5*h6
           +k[23][i]*h2*h3*h5*h6+k[24][i]*h2*h4*h5*h6+k[25][i]*h3*h4*h5*h5)
             /((3.0+m*theta)*(6.0+m*theta))*c*c*x*y
        };
        long double q11{
           (k[26][i]*h3*h4*h5*h5+k[27][i]*h1*h3*h5*h6+k[28][i]*h2*h3*h5*h6)
           /(3.0*(6.0+m*theta))*c*c*x*y
        };
        long double q12{
           (k[29][i]*h1*h3*h5*h6+k[30][i]*h1*h4*h5*h6+k[31][i]*h2*h3*h5*h6
           +k[32][i]*h2*h4*h5*h6)/(3.0+m*theta)*c*c*x*(1.0-y)
        };
        long double q13{
           (k[33][i]*h1*h3*h5*h6+k[34][i]*h1*h4*h5*h6+k[35][i]*h2*h3*h5*h6 // group 3
           +k[36][i]*h2*h4*h5*h6)/(1.0+m*theta)*c*c*(1.0-x)*(1.0-y)
        };
        long double q14{
           (k[37][i]*h1*h3*h5*h6+k[38][i]*h1*h4*h5*h6+k[39][i]*h2*h3*h5*h6
           +k[40][i]*h2*h4*h5*h6+k[41][i]*h3*h4*h5*h5)
             /((1.0+m*theta)*(3.0+m*theta))*c*c*(1.0-x)*y
        };
        long double q15{
           (k[42][i]*h1*h3*h5*h6+k[43][i]*h1*h4*h5*h6+k[44][i]*h2*h3*h5*h6
           +k[45][i]*h2*h4*h5*h6)
             /((1.0+m*theta)*(3.0+m*theta))*c*c*x*(1.0-y)
        };
        long double q16{
           ((k[46][i]+k[52][i])*h1*h3*h5*h6+(k[47][i]+k[53][i])*h1*h4*h5*h6
           +(k[48][i]+k[54][i])*h2*h3*h5*h6+(k[49][i]+k[55][i])*h2*h4*h5*h6
           +(k[50][i]+k[56][i])*h1*h2*h6*h6+(k[51][i]+k[57][i])*h3*h4*h5*h5)
             /((1.0+m*theta)*(3.0+m*theta)*(6.0+m*theta))*c*c*x*y
        };
        long double q17{
           (k[58][i]*h1*h3*h5*h6+k[59][i]*h1*h4*h5*h6+k[60][i]*h2*h3*h5*h6
           +k[61][i]*h2*h4*h5*h6+k[62][i]*h1*h2*h6*h6)
             /((1.0+m*theta)*(3.0+m*theta))*c*c*x*(1.0-y)
        };
        long double q18{
           2.0*(k[63][i]*h1*h2*h3*h5*h6+k[64][i]*h1*h2*h4*h5*h6) // group 4
           /((2.0+m1*theta)*(3.0+m*theta))*c*c*(a1-c1*x)*y
        };
        long double q19{
           2.0*(k[65][i]*h1*h2*h3*h5*h6*h6+k[66][i]*h1*h2*h4*h5*h6*h6
           +k[67][i]*h1*h3*h4*h5*h5*h6+k[68][i]*h2*h3*h4*h5*h5*h6)
           /(3.0*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y
        };
        long double q20{
           2.0*(k[69][i]*h1*h3*h4*h5*h6+k[70][i]*h2*h3*h4*h5*h6)
           /((2.0+m2*theta)*(3.0+m*theta))*c*c*x*(b2-c2*y)
        };
        long double q21{
           2.0*(k[71][i]*h1*h2*h3*h5*h6+k[72][i]*h1*h2*h4*h5*h6) //group 5
           /((2.0+m1*theta)*(1.0+m*theta))*c*c*(a1-c1*x)*(1.0-y)
        };
        long double q22{
           2.0*(k[73][i]*h1*h2*h3*h5*h6+k[74][i]*h1*h2*h4*h5*h6)
           /((1.0+m*theta)*(2.0+m1*theta)*(3.0+m*theta))*c*c*(a1-c1*x)*y
        };
        long double q23{
           2.0*(k[75][i]*h1*h2*h3*h5*h6*h6+k[76][i]*h1*h2*h4*h5*h6*h6)
           /(3.0*(1.0+m*theta)*(2.0+m*theta))*c*c*c*x*(1.0-y)
        };
        long double q24{
           +2.0*(k[77][i]*h1*h2*h3*h5*h6*h6+k[78][i]*h1*h2*h4*h5*h6*h6
               +k[79][i]*h1*h3*h4*h5*h5*h6+k[80][i]*h2*h3*h4*h5*h5*h6)
               /(3.0*(1.0+m*theta)*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y
        };
        long double q25{
           +4.0*(k[81][i]*h1*h2*h3*h5*h6*h6+k[82][i]*h1*h2*h4*h5*h6*h6
               +k[83][i]*h1*h3*h4*h5*h5*h6+k[84][i]*h2*h3*h4*h5*h5*h6)
               /(9.0*(1.0+m*theta)*(2.0+m*theta)*(4.0+m*theta))*c*c*c*x*y
        };
        long double q26{
           +2.0*(k[85][i]*h1*h3*h4*h5*h6+k[86][i]*h2*h3*h4*h5*h6)
               /((1.0+m*theta)*(2.0+m2*theta)*(3.0+m*theta))*c*c*x*(b2-c2*y)
        };
        long double q27{
           +2.0*(k[87][i]*h1*h3*h4*h5*h6+k[88][i]*h2*h3*h4*h5*h6) //group 6
               /((2.0+m2*theta)*(1.0+m*theta))*c*c*(1.0-x)*(b2-c2*y)
        };
        long double q28{
           +2.0*(k[89][i]*h1*h3*h4*h5*h5*h6+k[90][i]*h2*h3*h4*h5*h5*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta))*c*c*c*(1.0-x)*y
        };
        long double q29{
           +2.0*(k[91][i]*h1*h3*h4*h5*h6+k[92][i]*h2*h3*h4*h5*h6)
               /((1.0+m*theta)*(2.0+m2*theta)*(3.0+m*theta))*c*c*x*(b2-c2*y)
        };
        long double q30{
           +4.0*(k[93][i]*h1*h2*h3*h5*h6*h6+k[94][i]*h1*h2*h4*h5*h6*h6
               +k[95][i]*h1*h3*h4*h5*h5*h6+k[96][i]*h2*h3*h4*h5*h5*h6)
               /(9.0*(1.0+m*theta)*(2.0+m*theta)*(4.0+m*theta))*c*c*c*x*y
        };
        long double q31{
           +2.0*(k[97][i]*h1*h2*h3*h5*h6*h6
               +k[98][i]*h1*h3*h4*h5*h5*h6+k[99][i]*h2*h3*h4*h5*h5*h6)
               /(3.0*(1.0+m*theta)*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y
        };
        long double q32{
           +2.0*(k[100][i]*h1*h2*h3*h5*h6*h6+k[101][i]*h1*h2*h4*h5*h6*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta))*c*c*c*x*(1.0-y)
        };
        long double q33{
           +4.0*(k[102][i]*h1*h2*h3*h4*h5*h6) //group 7
               /((2.0+m1*theta)*(2.0+m2*theta)*(1.0+m*theta))*c*c*(a1-c1*x)*(b2-c2*y)
        };
        long double q34{
           +4.0*(k[103][i]*h1*h2*h3*h4*h5*h5*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta)*(2.0+m1*theta))*c*c*c*(a1-c1*x)*y
        };
        long double q35{
           +4.0*(k[104][i]*h1*h2*h3*h4*h5*h6*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta)*(2.0+m2*theta))*c*c*c*x*(b2-c2*y)
        };
        long double q36{
           +(k[105][i]*h1*h2*h3*h4*h5*h5*h6*h6+k[106][i]*h1*h2*h3*h4*h5*h5*h6*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y
        };
        long double q37{
           +4.0*(k[107][i]*h1*h2*h3*h4*h5*h6*h6)
               /(3.0*(1.0+m*theta)*(2.0+m*theta)*(2.0+m2*theta))*c*c*c*x*(b2-c2*y)
        };
        long double q38{
           +k[108][i]*h1*h2*h3*h4 //group 8
               /((1.0+m1*theta)*(1.0+m2*theta))*(a1*a1-c1*c1*x)*(b2*b2-c2*c2*y)
        };
        long double q39{
           +k[109][i]*h1*h2*h3*h4*h5*h5
                /((1.0+m1*theta)*(3.0+m*theta))*c*c*(a1*a1-c1*c1*x)*y
        };
        long double q40{
           +k[110][i]*h1*h2*h3*h4*h6*h6
                /((1.0+m2*theta)*(3.0+m*theta))*c*c*x*(b2*b2-c2*c2*y)
        };
        long double q41{
           +(k[111][i]*h1*h2*h3*h4*h5*h5*h6*h6+k[112][i]*h1*h2*h3*h4*h5*h5*h6*h6)
               /(2.0*(3.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y
        };
        long double q42{
           +k[113][i]*h1*h2*h3*h4*h5*h5 // group 9
                /((1.0+m*theta)*(1.0+m1*theta)*(3.0+m*theta))*c*c*(a1*a1-c1*c1*x)*y
        };
        long double q43{
           +k[114][i]*h1*h2*h3*h4*h5*h5*h6*h6
               /(2.0*(1.0+m*theta)*(3.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y
        };
        long double q44{
           +k[115][i]*h1*h2*h3*h4*h6*h6
                /((1.0+m*theta)*(1.0+m2*theta)*(3.0+m*theta))*c*c*(b2*b2-c2*c2*y)*x
        };
              
        
        z[i] = 1.0/256*(1.0+q1+q2+q3+q4+q5+q6+q7+q8+q9+q10+q11+q12+q13+q14+q15+q16
                        +q17+q18+q19+q20+q21+q22+q23+q24+q25+q26+q27+q28+q29+q30+q31+q32
                        +q33+q34+q35+q36+q37+q38+q39+q40+q41+q42+q43+q44
                        );

    }
    

    
    return z;
}

std::vector<long double> getProbAsymm(double t1, double t2, double t3, double gammaA, double gammaB, double gammaC, double gammaD, double gammaCD, double gammaBCD, double theta){
    std::vector<long double> z{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    double m{4.0/3};
  int k[133][15]{
  {9,-3,-3,9,9,9,-3,-3,-3,-3,-3,-3,-3,9,-3}
  ,{9,-3,-3,9,9,9,-3,-3,-3,-3,-3,-3,-3,9,-3}
  ,{9,9,-3,-3,9,-3,-3,9,-3,-3,-3,9,-3,-3,-3}
  ,{9,-3,9,-3,9,-3,9,-3,-3,-3,-3,-3,9,-3,-3}
  ,{9,-3,-3,9,9,9,-3,-3,-3,-3,-3,-3,-3,9,-3}
  ,{9,9,-3,-3,9,-3,-3,9,-3,-3,-3,9,-3,-3,-3}
  ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
  ,{9,-3,9,-3,9,-3,9,-3,-3,-3,-3,-3,9,-3,-3}
  ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
  ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
  ,{3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
  ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
  ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
  ,{3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
  ,{3,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1}
  ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
  ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
  ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
  ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
  ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
  ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
  ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
  ,{6,-2,-2,6,6,6,-2,-2,-2,-2,-2,-2,-2,6,-2}
  ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
  ,{9,9,-3,9,-3,-3,9,-3,-3,9,-3,-3,-3,-3,-3}
  ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
  ,{9,-3,9,9,-3,-3,-3,9,-3,-3,9,-3,-3,-3,-3}
  ,{9,9,9,-3,-3,9,-3,-3,9,-3,-3,-3,-3,-3,-3}
  ,{12,-4,-4,12,12,12,-4,-4,-4,-4,-4,-4,-4,12,-4}
  ,{12,12,-4,-4,12,-4,-4,12,-4,-4,-4,12,-4,-4,-4}
  ,{15,15,-5,15,-5,-5,15,-5,-5,15,-5,-5,-5,-5,-5}
  ,{12,-4,12,-4,12,-4,12,-4,-4,-4,-4,-4,12,-4,-4}
  ,{15,-5,15,15,-5,-5,-5,15,-5,-5,15,-5,-5,-5,-5}
  ,{15,15,15,-5,-5,15,-5,-5,15,-5,-5,-5,-5,-5,-5}
  ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
  ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
  ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
  ,{3,3,-1,-1,3,-1,-1,3,-1,-1,-1,3,-1,-1,-1}
  ,{3,-1,3,-1,3,-1,3,-1,-1,-1,-1,-1,3,-1,-1}
  ,{6,-2,-2,6,6,6,-2,-2,-2,-2,-2,-2,-2,6,-2}
  ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
  ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
  ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
  ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
  ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
  ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
  ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
  ,{12,-4,-4,12,12,12,-4,-4,-4,-4,-4,-4,-4,12,-4}
  ,{12,12,-4,-4,12,-4,-4,12,-4,-4,-4,12,-4,-4,-4}
  ,{18,18,-6,18,-6,-6,18,-6,-6,18,-6,-6,-6,-6,-6}
  ,{12,-4,12,-4,12,-4,12,-4,-4,-4,-4,-4,12,-4,-4}
  ,{18,-6,18,18,-6,-6,-6,18,-6,-6,18,-6,-6,-6,-6}
  ,{18,18,18,-6,-6,18,-6,-6,18,-6,-6,-6,-6,-6,-6}
  ,{24,-8,-8,24,24,24,-8,-8,-8,-8,-8,-8,-8,24,-8}
  ,{24,24,-8,-8,24,-8,-8,24,-8,-8,-8,24,-8,-8,-8}
  ,{24,24,-8,24,-8,-8,24,-8,-8,24,-8,-8,-8,-8,-8}
  ,{24,-8,24,-8,24,-8,24,-8,-8,-8,-8,-8,24,-8,-8}
  ,{24,-8,24,24,-8,-8,-8,24,-8,-8,24,-8,-8,-8,-8}
  ,{24,24,24,-8,-8,24,-8,-8,24,-8,-8,-8,-8,-8,-8}
  ,{6,-2,-2,6,6,6,-2,-2,-2,-2,-2,-2,-2,6,-2}
  ,{6,6,-2,-2,6,-2,-2,6,-2,-2,-2,6,-2,-2,-2}
  ,{6,6,-2,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2}
  ,{6,-2,6,-2,6,-2,6,-2,-2,-2,-2,-2,6,-2,-2}
  ,{6,-2,6,6,-2,-2,-2,6,-2,-2,6,-2,-2,-2,-2}
  ,{6,6,6,-2,-2,6,-2,-2,6,-2,-2,-2,-2,-2,-2}
  ,{3,3,-1,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1}
  ,{3,-1,3,3,-1,-1,-1,3,-1,-1,3,-1,-1,-1,-1}
  ,{3,3,3,-1,-1,3,-1,-1,3,-1,-1,-1,-1,-1,-1}
  ,{9,9,-3,9,-3,-3,9,-3,-3,9,-3,-3,-3,-3,-3}
  ,{9,-3,9,9,-3,-3,-3,9,-3,-3,9,-3,-3,-3,-3}
  ,{9,9,9,-3,-3,9,-3,-3,9,-3,-3,-3,-3,-3,-3}
  ,{6,-2,-2,-2,6,-2,-2,-2,2,2,2,-2,-2,-2,2}
  ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
  ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
  ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
  ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
  ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
  ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
  ,{18,-6,-6,18,-6,-6,-6,-6,6,-6,-6,6,6,-6,6}
  ,{18,18,-6,-6,-6,-6,-6,-6,-6,-6,6,-6,6,6,6}
  ,{18,-6,18,-6,-6,-6,-6,-6,-6,6,-6,6,-6,6,6}
  ,{6,-2,-2,-2,6,-2,-2,-2,2,2,2,-2,-2,-2,2}
  ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
  ,{12,-4,-4,-4,12,-4,-4,-4,4,4,4,-4,-4,-4,4}
  ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
  ,{36,-12,-12,-12,36,-12,-12,-12,12,12,12,-12,-12,-12,12}
  ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
  ,{12,12,-4,-4,-4,-4,-4,-4,-4,-4,4,-4,4,4,4}
  ,{12,-4,12,-4,-4,-4,-4,-4,-4,4,-4,4,-4,4,4}
  ,{36,-12,-12,-12,36,-12,-12,-12,12,12,12,-12,-12,-12,12}
  ,{24,-8,-8,24,-8,-8,-8,-8,8,-8,-8,8,8,-8,8}
  ,{24,24,-8,-8,-8,-8,-8,-8,-8,-8,8,-8,8,8,8}
  ,{24,-8,24,-8,-8,-8,-8,-8,-8,8,-8,8,-8,8,8}
  ,{18,-6,-6,-6,18,-6,-6,-6,6,6,6,-6,-6,-6,6}
  ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
  ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
  ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
  ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
  ,{6,-2,-2,6,-2,-2,-2,-2,2,-2,-2,2,2,-2,2}
  ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
  ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
  ,{18,18,-6,-6,-6,-6,-6,-6,-6,-6,6,-6,6,6,6}
  ,{18,-6,18,-6,-6,-6,-6,-6,-6,6,-6,6,-6,6,6}
  ,{36,-12,-12,36,-12,-12,-12,-12,12,-12,-12,12,12,-12,12}
  ,{36,36,-12,-12,-12,-12,-12,-12,-12,-12,12,-12,12,12,12}
  ,{36,-12,36,-12,-12,-12,-12,-12,-12,12,-12,12,-12,12,12}
  ,{36,-12,-12,-12,36,-12,-12,-12,12,12,12,-12,-12,-12,12}
  ,{48,-16,-16,48,-16,-16,-16,-16,16,-16,-16,16,16,-16,16}
  ,{48,48,-16,-16,-16,-16,-16,-16,-16,-16,16,-16,16,16,16}
  ,{48,-16,48,-16,-16,-16,-16,-16,-16,16,-16,16,-16,16,16}
  ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
  ,{12,12,-4,-4,-4,-4,-4,-4,-4,-4,4,-4,4,4,4}
  ,{12,-4,12,-4,-4,-4,-4,-4,-4,4,-4,4,-4,4,4}
  ,{6,6,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,2,2}
  ,{6,-2,6,-2,-2,-2,-2,-2,-2,2,-2,2,-2,2,2}
  ,{12,-4,-4,12,-4,-4,-4,-4,4,-4,-4,4,4,-4,4}
  ,{12,12,-4,-4,-4,-4,-4,-4,-4,-4,4,-4,4,4,4}
  ,{12,-4,12,-4,-4,-4,-4,-4,-4,4,-4,4,-4,4,4}
  ,{36,-12,-12,-12,-12,-12,12,12,12,0,0,0,0,12,-12}
  ,{108,-36,-36,-36,-36,12,12,12,12,12,12,12,12,12,-36}
  ,{180,-60,-60,-60,-60,20,20,20,20,20,20,20,20,20,-60}
  ,{36,-12,-12,-12,-12,4,4,4,4,4,4,4,4,4,-12}
  ,{12,-4,-4,-4,-4,-4,4,4,4,0,0,0,0,4,-4}
  ,{36,-12,-12,-12,-12,4,4,4,4,4,4,4,4,4,-12}
  ,{9,-3,-3,-3,-3,9,1,1,-3,1,1,1,1,-3,1}
  ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
  ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
  ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
  ,{18,-6,-6,-6,-6,18,2,2,-6,2,2,2,2,-6,2}
  ,{54,-18,-18,-18,-18,22,22,22,-2,-2,-2,-2,-2,-2,6}
  ,{108,-36,-36,-36,-36,44,44,44,-4,-4,-4,-4,-4,-4,12}
  ,{9,-3,-3,-3,-3,9,1,1,-3,1,1,1,1,-3,1}
  ,{27,-9,-9,-9,-9,11,11,11,-1,-1,-1,-1,-1,-1,3}
  };
    
    t1 *= theta/2;  // adjust here
    t2 *= theta/2;  // adjust here
    t3 *= theta/2;  // adjust here
    
  double x{exp(-(2.0/theta)*(t2-t1))};  // adjust 2.0 to 1.0
  double y{exp(-(2.0/theta)*(t3-t2))};  // adjust 2.0 to 1.0
  double a{exp(-m*t1)};
  double b{exp(-m*t2)};
  double c{exp(-m*t3)};
  double h1{exp(-m*t1*(gammaC-gammaCD))};
  double h2{exp(-m*t1*(gammaD-gammaCD))};
  double h3{exp(-m*t2*(gammaB-gammaBCD))};
  double h4{exp(-m*t2*(gammaCD-gammaBCD))};
  double h5{exp(-m*t3*(gammaA-1.0))};
  double h6{exp(-m*t3*(gammaBCD-1.0))};
  double m1{m*gammaCD};
  double m2{m*gammaBCD};
  double a1{pow(a, gammaCD)};
 // double a2{pow(a, gammaBCD)};
  double b1{pow(b, gammaCD)};
  double b2{pow(b, gammaBCD)};
  // double c1{pow(c, gammaCD)};
  double c2{pow(c, gammaBCD)};
    
   // theta *=2; // adjust here
    
       for(int i=0; i<15; ++i){
           
           long double q1{ // group 1
               k[0][i]*h1*h2/(3.0*(1.0+m1*theta))*y*(a1*a1-b1*b1*x)
           };
           long double q2{
               (k[1][i]*h1*h2*h4*h4+k[2][i]*h1*h3*h4+k[3][i]*h2*h3*h4)
               /(3.0*(2.0+m2*theta))*x*(b2*b2*y-c2*c2*y*y*y)
           };
           long double q3{
               (k[4][i]*h1*h2*h4*h4*h6*h6+k[5][i]*h1*h3*h4*h6*h6+k[6][i]*h1*h4*h5*h6
               +k[7][i]*h2*h3*h4*h6*h6+k[8][i]*h2*h4*h5*h6+k[9][i]*h3*h5*h6)
                 /(3.0*(6.0+m*theta))*c*c*x*y*y*y
           };
           long double q4{
               (k[10][i]*h1*h2*h4*h4*h6*h6+k[11][i]*h1*h3*h4*h6*h6+k[12][i]*h2*h3*h4*h6*h6)
               /((3.0+m*theta)*(6.0+m*theta))*c*c*x*y*y*y
           };
           long double q5{
              k[13][i]*h1*h2/(1.0+m1*theta)*(a1*a1-b1*b1*x)*(1.0-y)
           };
           long double q6{
              2.0*(k[14][i]*h1*h2*h4*h4+k[15][i]*h1*h3*h4+k[16][i]*h2*h3*h4)
              /(2.0+m2*theta)*x*((b2*b2*(1.0-y))/2.0-(b2*b2-c2*c2*y*y*y)/(6.0+2.0*m2*theta))
           };
           long double q7{ // group 2
              (k[17][i]*h1*h3*h4*h6*h6+k[18][i]*h1*h4*h5*h6+k[19][i]*h2*h3*h4*h6*h6
              +k[20][i]*h2*h4*h5*h6+k[21][i]*h3*h5*h6)/(3.0+m*theta)*c*c*y*(1.0-x)
           };
           long double q8{
              (k[22][i]*h1*h2*h4*h4*h6*h6+k[23][i]*h1*h3*h4*h6*h6+k[24][i]*h1*h4*h5*h6
              +k[25][i]*h2*h3*h4*h6*h6+k[26][i]*h2*h4*h5*h6+k[27][i]*h3*h5*h6)
                /(2.0*(3.0+m*theta))*c*c*x*y*(1.0-y*y)
           };
           long double q9{
              (k[28][i]*h1*h2*h4*h4*h6*h6+k[29][i]*h1*h3*h4*h6*h6+k[30][i]*h1*h4*h5*h6
              +k[31][i]*h2*h3*h4*h6*h6+k[32][i]*h2*h4*h5*h6+k[33][i]*h3*h5*h6)
                /((3.0+m*theta)*(6.0+m*theta))*c*c*x*y*y*y
           };
           long double q10{
              (k[34][i]*h1*h4*h5*h6+k[35][i]*h2*h4*h5*h6+k[36][i]*h3*h5*h6)
              /(3.0*(6.0+m*theta))*c*c*x*y*y*y
           };
           long double q11{
              (k[37][i]*h1*h3*h4+k[38][i]*h2*h3*h4)/(1.0+m2*theta)*(1.0-x)*(b2*b2-c2*c2*y)
           };
           long double q12{
              (k[39][i]*h1*h2*h4*h4+k[40][i]*h1*h3*h4+k[41][i]*h2*h3*h4)
              *x*((b2*b2-c2*c2*y)/(2.0+2.0*m2*theta)-(b2*b2-c2*c2*y*y*y)/(6.0+2.0*m2*theta))
           };
           long double q13{  // group 3
               (k[42][i]*h1*h3*h4*h6*h6+k[43][i]*h1*h4*h5*h6+k[44][i]*h2*h3*h4*h6*h6
               +k[45][i]*h2*h4*h5*h6+k[46][i]*h3*h5*h6)
                 /((1.0+m*theta)*(3.0+m*theta))*c*c*y*(1.0-x)
            };
           long double q14{
              (k[47][i]*h1*h2*h4*h4*h6*h6+k[48][i]*h1*h3*h4*h6*h6+k[49][i]*h1*h4*h5*h6
               +k[50][i]*h2*h3*h4*h6*h6+k[51][i]*h2*h4*h5*h6+k[52][i]*h3*h5*h6)
                 /(2.0*(1.0+m*theta)*(3.0+m*theta))*c*c*x*y*(1.0-y*y)
            };
           long double q15{
             (k[53][i]*h1*h2*h4*h4*h6*h6+k[54][i]*h1*h3*h4*h6*h6+k[55][i]*h1*h4*h5*h6
              +k[56][i]*h2*h3*h4*h6*h6+k[57][i]*h2*h4*h5*h6+k[58][i]*h3*h5*h6)
                /((1.0+m*theta)*(3.0+m*theta)*(6.0+m*theta))*c*c*x*y*y*y
            };
           long double q16{
            (k[59][i]*h1*h2*h4*h4*h6*h6+k[60][i]*h1*h3*h4*h6*h6+k[61][i]*h1*h4*h5*h6
             +k[62][i]*h2*h3*h4*h6*h6+k[63][i]*h2*h4*h5*h6+k[64][i]*h3*h5*h6)
               /((1.0+m*theta)*(3.0+m*theta)*(6.0+m*theta))*c*c*x*y*y*y
            };
           long double q17{
          (k[65][i]*h1*h4*h5*h6+k[66][i]*h2*h4*h5*h6+k[67][i]*h3*h5*h6)
            /(1.0+m*theta)*c*c*(1.0-x)*(1.0-y)
            };
            long double q18{
           (k[68][i]*h1*h4*h5*h6+k[69][i]*h2*h4*h5*h6+k[70][i]*h3*h5*h6)
           /(1.0+m*theta)*x*c*c*((1.0-y)/(2.0)-(1.0-y*y*y)/(6.0))
             };
            long double q19{ // group 4
           2.0*(k[71][i]*h1*h2*h3*h4*h6*h6+k[72][i]*h1*h2*h4*h5*h6)
           /((2.0+m1*theta)*(3.0+m*theta))*c*c*y*(a1-b1*x)
             };
            long double q20{
           2.0*(k[73][i]*h1*h2*h3*h4*h4*h6*h6+k[74][i]*h1*h2*h4*h4*h5*h6
             +k[75][i]*h1*h3*h4*h5*h6+k[76][i]*h2*h3*h4*h5*h6)
           /((4.0+m2*theta)*(3.0+m*theta))*x*(b2*c*c*y-c2*c*c*y*y*y)
             };
           long double q21{
           2.0*(k[77][i]*h1*h2*h3*h4*h4*h6*h6*h6+k[78][i]*h1*h2*h4*h4*h5*h6*h6
           +k[79][i]*h1*h3*h4*h5*h6*h6+k[80][i]*h2*h3*h4*h5*h6*h6)
                 /(3.0*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y*y*y
             };
           long double q22{
           2.0*k[81][i]*h1*h2*h3*h4/((1.0+m2*theta)*(2.0+m1*theta))*(a1-b1*x)*(b2*b2-c2*c2*y)
             };
           long double q23{
           4.0*k[82][i]*h1*h2*h3*h4*h4/(4.0+m2*theta)*x*((b2*b2*b2-b2*c2*c2*y)/(2.0+2.0*m2*theta)
               -(b2*b2*b2-c2*c2*c2*y*y*y)/(6.0+3.0*m2*theta))
             };
           long double q24{ //group 5
           2.0*(k[83][i]*h1*h2*h3*h4*h6*h6+k[84][i]*h1*h2*h4*h5*h6)
           /((1.0+m*theta)*(2.0+m1*theta)*(3.0+m*theta))*c*c*y*(a1-b1*x)
             };
           long double q25{
           2.0*(k[85][i]*h1*h2*h3*h4*h4*h6*h6+k[86][i]*h1*h2*h4*h4*h5*h6
             +k[87][i]*h1*h3*h4*h5*h6+k[88][i]*h2*h3*h4*h5*h6)
           /((1.0+m*theta)*(4.0+m2*theta)*(3.0+m*theta))*x*(b2*c*c*y-c2*c*c*y*y*y)
             };
           long double q26{
           2.0*(k[89][i]*h1*h2*h3*h4*h4*h6*h6*h6+k[90][i]*h1*h2*h4*h4*h5*h6*h6
           +k[91][i]*h1*h3*h4*h5*h6*h6+k[92][i]*h2*h3*h4*h5*h6*h6)
                 /(3.0*(1.0+m*theta)*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y*y*y
             };
           long double q27{
           4.0*(k[93][i]*h1*h2*h3*h4*h4*h6*h6*h6+k[94][i]*h1*h2*h4*h4*h5*h6*h6
           +k[95][i]*h1*h3*h4*h5*h6*h6+k[96][i]*h2*h3*h4*h5*h6*h6)
                 /(9.0*(1.0+m*theta)*(2.0+m*theta)*(4.0+m*theta))*c*c*c*x*y*y*y
             };
           long double q28{
           2.0*k[97][i]*h1*h2*h4*h5*h6/((1.0+m*theta)*(2.0+m1*theta))*c*c*(a1-b1*x)*(1.0-y)
             };
           long double q29{
           4.0*(k[98][i]*h1*h2*h4*h4*h5*h6+k[99][i]*h1*h3*h4*h5*h6+k[100][i]*h2*h3*h4*h5*h6)
           /((1.0+m*theta)*(4.0+m2*theta))*x*c*c*((b2-b2*y)/(2.0)-(b2-c2*y*y*y)/(6.0+m2*theta))
             };
           long double q30{ // group 6
           2.0*(k[101][i]*h1*h3*h4*h5*h6*h6+k[102][i]*h2*h3*h4*h5*h6*h6)
           /(3.0*(1.0+m*theta)*(2.0+m*theta))*c*c*c*y*(1.0-x)
             };
           long double q31{
           (k[103][i]*h1*h2*h4*h4*h5*h6*h6+k[104][i]*h1*h3*h4*h5*h6*h6+k[105][i]*h2*h3*h4*h5*h6*h6)
             /(3.0*(1.0+m*theta)*(2.0+m*theta))*c*c*c*x*y*(1.0-y*y)
             };
           long double q32{
           4.0*(k[106][i]*h1*h2*h3*h4*h4*h6*h6*h6+k[107][i]*h1*h2*h4*h4*h5*h6*h6
           +k[108][i]*h1*h3*h4*h5*h6*h6+k[109][i]*h2*h3*h4*h5*h6*h6)
             /(9.0*(1.0+m*theta)*(2.0+m*theta)*(4.0+m*theta))*c*c*c*x*y*y*y
             };
           long double q33{
           2.0*(k[110][i]*h1*h2*h4*h4*h5*h6*h6+k[111][i]*h1*h3*h4*h5*h6*h6+k[112][i]*h2*h3*h4*h5*h6*h6)
             /(3.0*(1.0+m*theta)*(3.0+m*theta)*(4.0+m*theta))*c*c*c*x*y*y*y
             };
           long double q34{
           2.0*(k[113][i]*h1*h3*h4*h5*h6+k[114][i]*h2*h3*h4*h5*h6)
           /((1.0+m*theta)*(2.0+m2*theta))*c*c*(1.0-x)*(b2-c2*y)
             };
           long double q35{
           (k[115][i]*h1*h2*h4*h4*h5*h6+k[116][i]*h1*h3*h4*h5*h6+k[117][i]*h2*h3*h4*h5*h6)
           /(1.0+m*theta)*x*c*c*((b2-c2*y)/(2.0+m2*theta)-(b2-c2*y*y*y)/(6.0+m2*theta))
             };
           long double q36{ //group 7
          4.0*k[118][i]*h1*h2*h3*h4*h5*h6*h6
           /(3.0*(1.0+m*theta)*(2.0+m*theta)*(2.0+m1*theta))*c*c*c*y*(a1-b1*x)
             };
            long double q37{
           4.0*k[119][i]*h1*h2*h3*h4*h4*h5*h6*h6
           /(3.0*(1.0+m*theta)*(2.0+m*theta)*(4.0+m2*theta))*c*c*c*x*y*(b2-c2*y*y)
              };
            long double q38{
          (k[120][i]+k[121][i])*h1*h2*h3*h4*h4*h5*h6*h6*h6
           /(3.0*(1.0+m*theta)*(2.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y*y*y
              };
             long double q39{
           4.0*k[122][i]*h1*h2*h3*h4*h5*h6
           /((1.0+m*theta)*(2.0+m1*theta)*(2.0+m2*theta))*c*c*(a1-b1*x)*(b2-c2*y)
               };
             long double q40{
           4.0*k[123][i]*h1*h2*h3*h4*h4*h5*h6/((1.0+m*theta)*(4.0+m2*theta))*x*c*c*
           ((b2*b2-b2*c2*y)/(2.0+m2*theta)-(b2*b2-c2*c2*y*y*y)/(6.0+2.0*m2*theta))
               };
             long double q41{ // group 8
           k[124][i]*h1*h2*h3*h5*h6/((1.0+m1*theta)*(3.0+m*theta))*c*c*y*(a1*a1-b1*b1*x)
               };
             long double q42{
           k[125][i]*h1*h2*h3*h4*h4*h5*h6/((3.0+m*theta)*(2.0+m2*theta))*c*c*x*y*(b2*b2-c2*c2*y*y)
               };
             long double q43{
           (k[126][i]+k[127][i])*h1*h2*h3*h4*h4*h5*h6*h6*h6
           /(2.0*(3.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y*y*y
               };
             long double q44{ // group 9
           k[128][i]*h1*h2*h3*h5*h6
           /((1.0+m*theta)*(1.0+m1*theta)*(3.0+m*theta))*c*c*y*(a1*a1-b1*b1*x)
               };
             long double q45{
           k[129][i]*h1*h2*h3*h4*h4*h5*h6
           /((1.0+m*theta)*(2.0+m2*theta)*(3.0+m*theta))*c*c*x*y*(b2*b2-c2*c2*y*y)
               };
             long double q46{
           k[130][i]*h1*h2*h3*h4*h4*h5*h6*h6*h6
           /(2.0*(1.0+m*theta)*(3.0+m*theta)*(3.0+m*theta))*c*c*c*c*x*y*y*y
               };
             long double q47{
           k[131][i]*h1*h2*h3*h5*h6/((1.0+m*theta)*(1.0+m1*theta))*c*c*(a1*a1-b1*b1*x)*(1.0-y)
               };
             long double q48{
          2.0*k[132][i]*h1*h2*h3*h4*h4*h5*h6/((1.0+m*theta)*(2.0+m2*theta))*x*c*c*
           ((b2*b2-b2*b2*y)/(2.0)-(b2*b2-c2*c2*y*y*y)/(6.0+2.0*m2*theta))
               };
           

           
           
        z[i] = (1.0+q1+q2+q3+q4+q5+q6+q7+q8+q9+q10+q11+q12+q13+q14+q15+q16+
                q17+q18+q19+q20+q21+q22+q23+q24+q25+q26+q27+q28+q29+q30+q31+q32+
                q33+q34+q35+q36+q37+q38+q39+q40+q41+q42+q43+q44+q45+q46+q47+q48)/256.0;
       }
    
    return z;
}



int main(int argc, const char * argv[]) {

    int symInd{};
    std::stringstream input1{argv[1]};
    input1 >> symInd;
    
    double tau1{};
    std::stringstream input2{argv[2]};
    input2 >> tau1;
    
    double tau2{};
    std::stringstream input3{argv[3]};
    input3 >> tau2;
    
    double tau3{};
    std::stringstream input4{argv[4]};
    input4 >> tau3;
    
    double gammaA{};
    std::stringstream input5{argv[5]};
    input5 >> gammaA;
    
    double gammaB{};
    std::stringstream input6{argv[6]};
    input6 >> gammaB;
    
    double gammaC{};
    std::stringstream input7{argv[7]};
    input7 >> gammaC;
    
    double gammaD{};
    std::stringstream input8{argv[8]};
    input8 >> gammaD;
    
    double gammaAB{};
    std::stringstream input9{argv[9]};
    input9 >> gammaAB;
    
    double gammaCD{};
    std::stringstream input10{argv[10]};
    input10 >> gammaCD;
    
    double theta{};
    std::stringstream input11{argv[11]};
    input11 >> theta;
    
      std::ofstream out1("test2", std::ios::app);
    
  std::vector<long double> ProbVec{getProbSym(1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.006)};
    
 
    std::cout << 4.0*ProbVec[0] << " ";
    for(int i=1; i<8; ++i){
        std::cout << 12.0*ProbVec[i] << " ";
    }
    for(int i=8; i<15; ++i){
        std::cout << 24.0*ProbVec[i] << " ";
    }
    std::cout << '\n';

   
    std::cout << '\n';
    
    

    

    
    return 0;
}
